name: Validate and test

on:
  pull_request:
  push:
    branches: [ main ]
    tags-ignore: [ v* ]

concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  formatting-check:
    name: Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Scala on JDK 8
        uses: olafurpg/setup-scala@v13
        with:
          java-version: adopt@1.8

      - name: Cache Coursier cache
        uses: coursier/cache-action@v6.2

      - name: Cache Build Target
        uses: actions/cache@v2
        with:
          path: project/**/target
          key: build-target-${{ hashFiles('**/*.sbt', 'project/build.properties', 'project/**/*.scala') }}

      - name: Autoformat
        run: sbt +headerCreateAll +scalariformFormat +test:scalariformFormat

      - name: Check for missing formatting
        run: git diff --exit-code --color

      - name: FOSSA policy check
        if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == 'akka/akka-http' }}
        run: |-
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/spectrometer/master/install.sh | bash
          fossa analyze && fossa test
        env:
          FOSSA_API_KEY: "${{secrets.FOSSA_API_KEY}}"

  compile-and-test:
    name: Compile and test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        SCALA_VERSION: [2.12, 2.13]
        JABBA_JDK: [1.8, 1.11]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.JABBA_JDK }}
        uses: olafurpg/setup-scala@v10
        with:
          java-version: adopt@${{ matrix.JABBA_JDK }}

      - name: Cache Coursier cache
        uses: coursier/cache-action@v6.2

      - name: Cache Build Target
        uses: actions/cache@v2
        with:
          path: project/**/target
          key: build-target-${{ hashFiles('**/*.sbt', 'project/build.properties', 'project/**/*.scala') }}

      - name: Compile everything
        run: sbt ++${{ matrix.SCALA_VERSION }} Test/compile

      # Quick testing for PR validation
      - name: Validate pull request for JDK ${{ matrix.JABBA_JDK }}, Scala ${{ matrix.SCALA_VERSION }}
        if: ${{ github.event_name == 'pull_request' }}
        run: sbt -Dakka.http.parallelExecution=false -Dakka.test.timefactor=2 ++${{ matrix.SCALA_VERSION }} validatePullRequest

      # Full testing for pushes
      - name: Run all tests JDK ${{ matrix.JABBA_JDK }}, Scala ${{ matrix.SCALA_VERSION }}
        if: ${{ github.event_name == 'push' }}
        run: sbt -Dakka.http.parallelExecution=false -Dakka.test.timefactor=2 ++${{ matrix.SCALA_VERSION }} mimaReportBinaryIssues test

      - name: Upload test results
        uses: actions/upload-artifact@v2  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results-${{ matrix.JABBA_JDK }}-${{ matrix.SCALA_VERSION }}
          path: '**/target/test-reports/*.xml'
